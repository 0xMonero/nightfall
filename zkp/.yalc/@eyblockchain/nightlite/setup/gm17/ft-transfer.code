import "hashes/sha256/1536bit.code" as sha256of1536
import "hashes/sha256/1024bit.code" as sha256of1024
import "hashes/sha256/512bit.code" as sha256of512
import "utils/pack/unpack128.code" as unpack128
import "utils/pack/nonStrictUnpack256.code" as unpack256
<<<<<<< HEAD:zkp/.yalc/@eyblockchain/nightlite/setup/gm17/ft-transfer.code
=======
import "../common/el-gamal3.zok" as enc3
import "hashes/sha256/IVconstants.code" as IVconstants
import "hashes/sha256/shaRoundNoBoolCheck.code" as sha256
import "../common/order-fields.zok" as orderFields
import "../common/mimc-hash-2.zok" as mimc2
import "../common/edwards-compress.zok" as edwardsCompress
import "utils/pack/pack256.code" as pack256
>>>>>>> feat(zkp): added Edwards compression to public input points:zkp/code/gm17/ft-transfer/ft-transfer.code

def concatenate128x256x256(field[128] a, field[256] b, field[256] c)->(field[640]):
	return [...a, ...b, ...c]

def concatenate256x256(field[256] a, field[256] b)->(field[512]):
	return [...a, ...b]

def concatenate256x256x256x256x256(field[256] a, field[256] b, field[256] c, field[256] d, field[256] e)->(field[1280]):
	return [...a, ...b, ...c, ...d, ...e]

<<<<<<< HEAD:zkp/.yalc/@eyblockchain/nightlite/setup/gm17/ft-transfer.code
def orderedConcatenate216x216(field order, field[216] a, field[216] b)->(field[432]):
	field[216] left = if order==0 then b else a fi
	field[216] right = if order==0 then a else b fi
	return [...left, ...right]

=======
def concatenate13xx256(field[13][256] a)->(field[3328]):
  return [...a[0], ...a[1], ...a[2], ...a[3], ...a[4], ...a[5], ...a[6], ...a[7], ...a[8], ...a[9], ...a[10], ...a[11], ...a[12]]

def orderedConcatenate216x216(field order, field[216] pathNode, field[216] siblingNode)->(field[432]):
	field[216] left = if order == 0 then pathNode else siblingNode fi
	field[216] right = if order == 0 then siblingNode else pathNode fi
	return [...left, ...right]

def sha256of3584(field[256] a0, field[256] a1, field[256] a2, field[256] a3, field[256] a4, field[256] a5, field[256] a6, field[256] a7, field[256] a8, field[256] a9, field[256] a10, field[256] a11, field[256] a12, field[256] a13) -> (field[256]):
    IV =  IVconstants()
    digest1 =  sha256(a0, a1, IV)
    digest2 =  sha256(a2, a3, digest1)
    digest3 =  sha256(a4, a5, digest2)
    digest4 =  sha256(a6, a7, digest3)
    digest5 =  sha256(a8, a9, digest4)
    digest6 =  sha256(a10, a11, digest5)
    digest7 =  sha256(a12, a13, digest6)
    return digest7

>>>>>>> feat(zkp): added Edwards compression to public input points:zkp/code/gm17/ft-transfer/ft-transfer.code
def shaPad432To512(field[432] a)->(field[512]):
	return [...a, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,1,0,1,1,0,0,0,0]

// Provides the padding (only!) for a 256-bit message.
def shaPad256To512()->(field[256]):
	return [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0]

// Provides the padding (only!) for a 512-bit message.
def shaPad512To1024()->(field[512]):
	return [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,    0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0]

// Provides the padding (only!) for a 768-bit message.
def shaPad768To1024()->(field[256]):
	return [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0]

// Provides the padding (only!) for a 640-bit message.
def shaPad640To1024()->(field[384]):
	return [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0]

// Provides the padding (only!) for a 1280-bit message.
def shaPad1280To1536()->(field[256]):
	return [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0]

<<<<<<< HEAD:zkp/.yalc/@eyblockchain/nightlite/setup/gm17/ft-transfer.code
// unpacks the bits in a path field ready for sha-ing
def unpackPath(field p)->(field[216]):
	field[256] sister = unpack256(p)
	return sister[40..256]
=======
// Provides the padding (only!) for a sha256of3584-bit message.
def shaPad3328To3584()->(field[256]):
  return
>>>>>>> feat(zkp): added Edwards compression to public input points:zkp/code/gm17/ft-transfer/ft-transfer.code


// Inputs for main are:
// Alice's original coins are valueC and valueD

// valueC - the amount contained in commitmentC (private)
// secretKeyA -  Alice's secret key (private)
// saltC - the salt for commitmentC (private)
// pathC0-pathC31 - the Merkle path for commitmentC (private)

// valueD - the amount contained in commitmentD (private)
// saltD - the salt for commitmentD (private)
// pathD0-pathD31 - the Merkle path for commitmentD (private)

// nullifierC - the nullifier for commitmentC (public)
// nullifierD - the nullifier for commitmentD (public)

// New commitments created by Alice:
// valueE - the amount in commitmentE (private)
// publicKeyB - Bob's public key (private)
// saltE - the serial number for coin E (private)
// commitmentE - the commitment corresponding to valueE (public)

// valueF - the amount in commitment_F (private)
// saltF - the serial number for coin F (private)
// commitmentF - the commitment corresponding to valueF (public)

// root - the Merkle root (public)

// publicInputHash = hash(root, nullifierC, nullifierD, commitmentE, commitmentF)

// Note - we now use 216 bits for the Merkle tree calculation. This is because 432 is the biggest input we can use for sha256 if we want 432/2 to end on a byte boundary for easier Solidity computation without needing to do full rounds and we need to concatenate the two child hashes. We consider 216 bits to be sufficiently secure. The nullifier, commitment and root retain 256-bit security.

// Each field element passed to main() can be at most 128bits, to make use of unpack128() so most variables occupy two fields (except the publicInputHash, which we maximize as 248-bits)

def main(field publicInputHash, private field valueC, private field secretKeyAHigh, private field  secretKeyALow, private field saltCHigh, private field saltCLow, private field[32] pathC, private field orderC, private field valueD, private field saltDHigh, private field saltDLow, private field[32] pathD, private field orderD, private field nullifierCHigh, private field nullifierCLow, private field nullifierDHigh, private field nullifierDLow, private field valueE, private field publicKeyBHigh, private field publicKeyBLow, private field saltEHigh, private field saltELow, private field commitmentEHigh, private field commitmentELow, private field valueF, private field saltFHigh, private field saltFLow, private field commitmentFHigh, private field commitmentFLow, private field rootHigh, private field rootLow)->():

	// Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit string for simplicity for now. Later efficiencies could be made by grouping some inputs.

	field[256] publicInputHashBits = unpack256(publicInputHash)

	field[128] valueCBits = unpack128(valueC)

	field[128] secretKeyAHighBits = unpack128(secretKeyAHigh)
	field[128] secretKeyALowBits = unpack128(secretKeyALow)
	field[256] secretKeyABits = [...secretKeyAHighBits, ...secretKeyALowBits]

	field[128] saltCHighBits = unpack128(saltCHigh)
	field[128] saltCLowBits = unpack128(saltCLow)
	field[256] saltCBits = [...saltCHighBits, ...saltCLowBits]

	field[128] valueDBits = unpack128(valueD)

	field[128] saltDHighBits = unpack128(saltDHigh)
	field[128] saltDLowBits = unpack128(saltDLow)
	field[256] saltDBits = [...saltDHighBits, ...saltDLowBits]

	field[128] nullifierCHighBits = unpack128(nullifierCHigh)
	field[128] nullifierCLowBits = unpack128(nullifierCLow)
	field[256] nullifierCBits = [...nullifierCHighBits, ...nullifierCLowBits]

	field[128] nullifierDHighBits = unpack128(nullifierDHigh)
	field[128] nullifierDLowBits = unpack128(nullifierDLow)
	field[256] nullifierDBits = [...nullifierDHighBits, ...nullifierDLowBits]

	field[128] valueEBits = unpack128(valueE)

	field[128] publicKeyBHighBits = unpack128(publicKeyBHigh)
	field[128] publicKeyBLowBits = unpack128(publicKeyBLow)
	field[256] publicKeyBBits = [...publicKeyBHighBits, ...publicKeyBLowBits]

	field[128] saltEHighBits = unpack128(saltEHigh)
	field[128] saltELowBits = unpack128(saltELow)
	field[256] saltEBits = [...saltEHighBits, ...saltELowBits]

	field[128] commitmentEHighBits = unpack128(commitmentEHigh)
	field[128] commitmentELowBits = unpack128(commitmentELow)
	field[256] commitmentEBits = [...commitmentEHighBits, ...commitmentELowBits]

	field[128] valueFBits = unpack128(valueF)

	field[128] saltFHighBits = unpack128(saltFHigh)
	field[128] saltFLowBits = unpack128(saltFLow)
	field[256] saltFBits = [...saltFHighBits, ...saltFLowBits]

	field[128] commitmentFHighBits = unpack128(commitmentFHigh)
	field[128] commitmentFLowBits = unpack128(commitmentFLow)
	field[256] commitmentFBits = [...commitmentFHighBits, ...commitmentFLowBits]

	field[128] rootHighBits = unpack128(rootHigh)
	field[128] rootLowBits = unpack128(rootLow)
	field[256] rootBits = [...rootHighBits, ...rootLowBits]

	field[128] orderCBits = unpack128(orderC)
	field[128] orderDBits = unpack128(orderD)


	field[256] padding256To512 = shaPad256To512()
	field[512] padding512To1024 = shaPad512To1024()
	field[256] padding768To1024 = shaPad768To1024()
	field[384] padding640To1024 = shaPad640To1024()
	field[256] padding1280To1536 = shaPad1280To1536()
<<<<<<< HEAD:zkp/.yalc/@eyblockchain/nightlite/setup/gm17/ft-transfer.code
=======
	field[256] padding3328To3584 = shaPad3328To3584()
>>>>>>> feat(zkp): added Edwards compression to public input points:zkp/code/gm17/ft-transfer/ft-transfer.code



	// First we construct a proof that the nullifiers nulliferC and nullifierD are correct:
	// H(saltC|secretKeyA) = nullifierC.
	// H(saltD|secretKeyA) = nullifierD.

	field[512] preimage512 = concatenate256x256(saltCBits, secretKeyABits)
	field[256] nullifierCBitsCheck = sha256of1024(preimage512[0..256], preimage512[256..512], padding512To1024[0..256], padding512To1024[256..512])

	preimage512 = concatenate256x256(saltDBits, secretKeyABits)
	field[256] nullifierDBitsCheck = sha256of1024(preimage512[0..256], preimage512[256..512], padding512To1024[0..256], padding512To1024[256..512])



	// H(valueC|publicKeyA|saltA) = commitmentC is in the Merkle Tree

	// Calculation of publicKeyA from H(secretKeyA)
	field[256] publicKeyABits = sha256of512(secretKeyABits, padding256To512)


	// And calculation of commitmentC
	field[640] preimage640 = concatenate128x256x256(valueCBits, publicKeyABits, saltCBits)

	field[1024] preimage1024 = [...preimage640, ...padding640To1024]

	field[256] hash = sha256of1024(preimage1024[0..256], preimage1024[256..512], preimage1024[512..768], preimage1024[768..1024]) // commitmentC

	// concatenate siblings and hash all the way up to the root
	for field i in 0..32 do
		field j = 31-i
		preimage512 = shaPad432To512(orderedConcatenate216x216(orderCBits[j], hash[40..256], unpackPath(pathC[j])))
		hash = sha256of512(preimage512[0..256], preimage512[256..512])
	endfor
	// save the computed root:
	field[256] rootCBitsCheck = hash

	// H(valueD|publicKeyA|saltA) = commitmentD is in the Merkle Tree

	// Calculation of the commitment
	preimage640 = concatenate128x256x256(valueDBits, publicKeyABits, saltDBits)

	preimage1024 = [...preimage640, ...padding640To1024]

	hash = sha256of1024(preimage1024[0..256], preimage1024[256..512], preimage1024[512..768], preimage1024[768..1024]) // commitmentD

	// concatenate siblings and hash all the way up to the root
	for field i in 0..32 do
		field j = 31-i
		preimage512 = shaPad432To512(orderedConcatenate216x216(orderDBits[j], hash[40..256], unpackPath(pathD[j])))
		hash = sha256of512(preimage512[0..256], preimage512[256..512])
  endfor
	// save the computed root:
	field[256] rootDBitsCheck = hash


	// Next up - prove that valueE is in commitmentE and valueF is in commitmentF

	// Work out commitmentE = H(valueE|publicKeyB|saltE)
	preimage640 = concatenate128x256x256(valueEBits, publicKeyBBits, saltEBits)

	preimage1024 = [...preimage640, ...padding640To1024]

	field[256] commitmentEBitsCheck = sha256of1024(preimage1024[0..256], preimage1024[256..512], preimage1024[512..768], preimage1024[768..1024]) // commitmentE


	// And commitmentF
	preimage640 = concatenate128x256x256(valueFBits, publicKeyABits, saltFBits)

	preimage1024 = [...preimage640, ...padding640To1024]

	field[256] commitmentFBitsCheck = sha256of1024(preimage1024[0..256], preimage1024[256..512], preimage1024[512..768], preimage1024[768..1024]) // commitmentF


	// Sum check C+D = E+F - we don't want anyone to create money.

	field sumIn = valueC + valueD
	field sumOut = valueE + valueF


	// Now check the proofs

	nullifierCBits == nullifierCBitsCheck
	nullifierDBits == nullifierDBitsCheck
	rootBits == rootCBitsCheck
	rootBits == rootDBitsCheck
	commitmentEBits == commitmentEBitsCheck
	commitmentFBits == commitmentFBitsCheck
	sumIn == sumOut

	// Overflow prevention:
	valueCBits[0] == 0
	valueDBits[0] == 0
	valueEBits[0] == 0
	valueFBits[0] == 0


	// Check that the 'public inputs' hash to the publicInputHash:
<<<<<<< HEAD:zkp/.yalc/@eyblockchain/nightlite/setup/gm17/ft-transfer.code
	field[1280] preimage1280 = concatenate256x256x256x256x256(rootBits, nullifierCBits, nullifierDBits, commitmentEBits, commitmentFBits)

	field[256] publicInputHashBitsCheck = sha256of1536(preimage1280[0..256], preimage1280[256..512], preimage1280[512..768], preimage1280[768..1024], preimage1280[1024..1280], padding1280To1536[0..256])

	publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]

=======
	// To make the hash smaller, let's 'compress' each curve point ordered pair into a single 256 bit array (rather than two)...
	field[256] compressedEncryptionBits1 = edwardsCompress(encryption[0], encryption[1])
	field[256] compressedEncryptionBits2 = edwardsCompress(encryption[2], encryption[3])
	field[256] compressedEncryptionBits3 = edwardsCompress(encryption[4], encryption[5])
	field[256] compressedEncryptionBits4 = edwardsCompress(encryption[6], encryption[7])
	field[256] compressedAuthorityPublicKeyBits1 = edwardsCompress(authorityPublicKey1[0], authorityPublicKey1[1])
	field[256] compressedAuthorityPublicKeyBits2 = edwardsCompress(authorityPublicKey2[0], authorityPublicKey2[1])
	field[256] compressedAuthorityPublicKeyBits3 = edwardsCompress(authorityPublicKey3[0], authorityPublicKey3[1])
  // ...this saves four stages of sha hashing so about 100k constraints minus the work to do the compression
	field[3328] preimage3328 = concatenate13xx256([rootBits, nullifierCBits, nullifierDBits, commitmentEBits, commitmentFBits, unpack256(publicKeyRoot), compressedEncryptionBits1, compressedEncryptionBits2, compressedEncryptionBits3, compressedEncryptionBits4, compressedAuthorityPublicKeyBits1, compressedAuthorityPublicKeyBits2, compressedAuthorityPublicKeyBits3])

	field[256] publicInputHashBitsCheck = sha256of3584(preimage3328[0..256], preimage3328[256..512], preimage3328[512..768], preimage3328[768..1024], preimage3328[1024..1280], preimage3328[1280..1536], preimage3328[1536..1792], preimage3328[1792..2048], preimage3328[2048..2304], preimage3328[2304..2560], preimage3328[2560..2816], preimage3328[2816..3072], preimage3328[3072..3328], padding3328To3584)

	publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]

	//field[8] ret = [pack256(compressedEncryptionBits1), pack256(compressedEncryptionBits2), pack256(compressedEncryptionBits3), pack256(compressedEncryptionBits4), pack256(compressedAuthorityPublicKeyBits1), pack256(compressedAuthorityPublicKeyBits2), pack256(compressedAuthorityPublicKeyBits3), pack256(publicInputHashBitsCheck)]
>>>>>>> feat(zkp): added Edwards compression to public input points:zkp/code/gm17/ft-transfer/ft-transfer.code

	return
