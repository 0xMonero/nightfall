#!/bin/bash
set -e

GREEN='\033[0;32m'
Yellow='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m'

# array contractsUrls and contracts values must be mapped by index
contractsUrls=(
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/utils/address-utils.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/utils/erc165.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc20/master/contracts/tokens/ERC20.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/tokens/erc721.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/tokens/erc721-metadata.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/tokens/erc721-token-receiver.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/ownership/ownable.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/math/safe-math.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/utils/supports-interface.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/tokens/nf-token.sol'
  'https://raw.githubusercontent.com/0xcert/ethereum-erc721/master/src/contracts/tokens/nf-token-metadata.sol'
)
contracts=(
  'AddressUtils.sol'
  'ERC165.sol'
  'ERC20Interface.sol'
  'ERC721Interface.sol'
  'ERC721Metadata.sol'
  'ERC721TokenReceiver.sol'
  'Ownable.sol'
  'SafeMath.sol'
  'SupportsInterface.sol'
  'NFToken.sol'
  'NFTokenMetadata.sol'
)

mkdir -p temp

printf "${Yellow}\n\nThis script will not test Pairing_v1.sol.\n"
printf "zkp/contracts/Pairing_v1.sol file contains two libraries BN256G2 and Pairing_v1\n"
printf "Thus, Pairing_v1.sol outdated check neither work with \e[3m'file diff'\e[0m ${Yellow}nor with \e[3m'compiled file diff'.\e[0m\n\n"

# function uninstall node module solc
# and install with specfic version
solidityVersion=''
installSolidity(){
  if [[ $solidityVersion == $1 ]]
  then
    return
  else
    solidityVersion=$1
  fi
  npm uninstall -g solc &> /dev/null
  npm install -g --silent solc@${solidityVersion} &> /dev/null
}

# this function imitate a progress bar to the terminal
logProgress(){
  progress=$1
  str=''
  space='____________________'
  while [ $progress -ge 10 ]
  do
    str="$str##"
    progress=$(( progress - 10 ))
  done
  echo -ne $(echo $str$space | cut -c1-20 ) $1 "%" "\r"
  if [[ $1 == 100 ]]
  then
    sleep 1
    printf '\r'; printf ' %0.s' {0..30}; printf '\r'
  fi
}

# compare used solidity version of local and repo's
compareSolidityVersion(){
  if [[ $1 == $2 ]]
  then
    return
  fi

  cutAt=1

  while [[ $(echo $1 | cut -d '.' -f $cutAt) != '' ]]
  do
    v1=$(echo $1 | cut -d '.' -f $cutAt)
    v2=$(echo $2 | cut -d '.' -f $cutAt)

    if [[ $v1 == $v2 ]]
    then
      cutAt=$(( cutAt + 1 ))
      continue
    elif [[ $v1 < $v2 ]]
    then
      echo outdated
      break
    else
      echo latest
      break
    fi
  done
}

# this function file diff for a particular contract
doFileDiff() {
  logProgress 100

  printf "${Yellow}WARN: compilation failed. Doing a Solidity file Diff zkp/contracts/${1} temp/${1} ${NC}\n"
  (
    diff -q zkp/contracts/$1 temp/$1 &> /dev/null &&
    printf "${GREEN}${contracts[$indx]} is latest ${NC}\n"
  ) || printf "${RED}${contracts[$indx]} is outdated ${NC}\n"
}

# get file matching wild card for specfic path
getFilenamesAtPath() {
  files=$(echo $1 | tr '%' '\n')
  path=$2
  filenames=''
  for file in $files
  do
    filePath=$path/$file
    filenames="${filenames} ${filePath}"
  done
  echo $filenames
}

# recursive function to get import solidity files
getImportedFileName() {
  filename=$1
  path=$2
  imports=$(grep '^import' $path/$filename  | cut -d ' ' -f 2 | sed 's|.*/||' | cut -d '"' -f 1)
  if [[ $imports == '' ]]
  then
    return
  fi

  importStrings=$(echo $imports | tr ' ' '%')
  importFiles=$(getFilenamesAtPath $importStrings $path)

  for import in $imports
  do
    sed -i -E "s,.*$import,import \"\./$import,g" $path/$filename
    importFiles="$importFiles $(getImportedFileName $import $path)"
  done

  echo $importFiles
}


# for loop iteration on list of solidity files
for indx in ${!contracts[@]}
do
  fileMatcher=''
  printf "\nChecking ${contracts[$indx]}\n"

  curl ${contractsUrls[$indx]} -o temp/${contracts[$indx]} &> /dev/null
  logProgress 10

  urlFilename=${contractsUrls[$indx]##*/}
  cp temp/${contracts[$indx]} temp/$urlFilename &> /dev/null || true

  actualSolidityVersion=$(grep 'pragma solidity' zkp/contracts/${contracts[$indx]}  | cut -d' ' -f 3 | cut -d';' -f 1 | cut -d'^' -f 2)
  expectedSolidityVersion=$(grep 'pragma solidity' temp/${contracts[$indx]}  | cut -d' ' -f 3 | cut -d';' -f 1 | cut -d'^' -f 2)
  
  installSolidity $actualSolidityVersion
  logProgress 20

  if [[ $(grep '^interface' zkp/contracts/${contracts[$indx]}) == '' ]]
  then
    importFiles=$(getImportedFileName ${contracts[$indx]} 'zkp/contracts')
    solcjs $importFiles --bin zkp/contracts/${contracts[$indx]} -o temp &> /dev/null || {
      doFileDiff ${contracts[$indx]}
      continue
    }
    logProgress 30

    installSolidity $expectedSolidityVersion
    logProgress 60

    importFiles=$(getImportedFileName ${contracts[$indx]} 'temp')
    solcjs $importFiles --bin temp/${contracts[$indx]} -o temp &> /dev/null || {
      doFileDiff ${contracts[$indx]}
      continue
    }
    logProgress 80

    fileMatcher=*$(echo ${contracts[$indx]} | tr '.' '_')*bin
  else
    importFiles=$(getImportedFileName ${contracts[$indx]} 'zkp/contracts')
    solcjs $importFiles --abi zkp/contracts/${contracts[$indx]} -o temp &> /dev/null || {
      doFileDiff ${contracts[$indx]}
      continue
    }
    logProgress 30

    installSolidity $expectedSolidityVersion
    logProgress 60

    importFiles=$(getImportedFileName ${contracts[$indx]} 'temp')
    solcjs $importFiles --abi temp/${contracts[$indx]} -o temp &> /dev/null || {
      doFileDiff ${contracts[$indx]}
      continue
    }
    logProgress 80

    fileMatcher=*$(echo ${contracts[$indx]} | tr '.' '_')*abi
  fi

  files=$(find temp -name $fileMatcher)
  logProgress 100

  (
    diff -q $files &> /dev/null &&
    printf "${GREEN}${contracts[$indx]} is latest ${NC}\n"
  ) || printf "${RED}${contracts[$indx]} is outdated ${NC}\n"

  if [[ $(compareSolidityVersion $actualSolidityVersion $expectedSolidityVersion) == "outdated" ]]
  then
    printf "${Yellow}Solidity version $actualSolidityVersion is outdated by version $expectedSolidityVersion ${NC}\n"
  fi

done


# below code checks
# is ZoKrates docker image is outdated or not.

printf "\nChecking ZoKrates Docker Image\n"
logProgress 10

if [[ $(uname -s) == 'Darwin' ]]
then
  brew install jq &> /dev/null
  logProgress 30
fi

if [[ $(uname -s) == 'Linux' ]]
then
  sudo apt-get update &> /dev/null
  sudo apt-get install jq &> /dev/null
  logProgress 30
fi

zokratesLatestTag=''
tags=$(curl -s 'https://registry.hub.docker.com/v1/repositories/zokrates/zokrates/tags' | jq '.[]["name"]')
logProgress 60

for tag in ${tags}
do
  zokratesLatestTag=$(echo $tag | sed 's/"//g')
done

logProgress 100

if [[ $(docker images -q zokrates/zokrates:$zokratesLatestTag) == '' ]] || [[ $(grep '^docker pull zokrates/zokrates:'$zokratesLatestTag nightfall) == '' ]]
then
  printf "${RED}Zokrates docker image is outdated ${NC}\n"
else
  printf "${GREEN}Zokrates docker image is latest ${NC}\n"
fi

rm -dr temp/
npm uninstall -g solc &> /dev/null
